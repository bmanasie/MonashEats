/**
 * 
 */


import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

public class MonashEats {
    static ArrayList<String> surburbList = new ArrayList<>();
    static AdminController admin = new AdminController();
    static CartController cart = new CartController();
    static UserController user = new UserController();
    static RestaurantController restaurantcontrol = new RestaurantController();
    static OrderController ordercontrol = new OrderController();
    static String restaurantName = null;
    static String suburbName = null;

    /**
     * @param args
     */
    public static void main(String[] args) {

        try {
            restaurantcontrol.createRestaurant();
            printOnScreen("Select the option to proceed");
            printOnScreen("1. Login");
            printOnScreen("2. Register");
            printOnScreen("3. Search Restaurant");
            printOnScreen("4. View Past Orders");
            int selection = getUserInputInt();
            if (selection == 1) {
                login();
            }
            if (selection == 4) {
                viewPastOrders();
            }
            if (selection == 3) {
                searchRestaurant();
            }
        } catch (IOException e) {

            e.printStackTrace();
        }

    }
// Search a restaurant by taking suburb input from Customer
    public static void searchRestaurant() throws IOException {
        surburbList = admin.getSurburbList();
        admin.setRestaurantinSuburb();
        printOnScreen("Enter a suburb Name");

        while (true) {

            suburbName = getUserInputString();
            if (surburbList.contains(suburbName)) {
                selectRestaurant(suburbName);

                break;
            } else {
                printOnScreen("Not a suburb name, enter again");

            }

        }
    }
// View orders placed by the customer in the past
    public static void viewPastOrders() throws IOException {
        String path = "Orders";
        File file = new File(path + user.login().getName() + ".txt");
        int index = 0;
        List<String> list = new ArrayList<>();
        if (file.exists()) {

            try (BufferedReader br = new BufferedReader(new FileReader(file))) {
                String strLine;
                index++;
                // Read lines from the file, returns null when end of stream is reached

                while ((strLine = br.readLine()) != null) {
                    list = Arrays.asList(strLine.split(","));
                    printOnScreen(index + "");
                    for (int i = 0; i < list.size(); i++) {
                        printOnScreen(list.get(i));
                    }

                }
            }

        }
    }
// Select the restaurant by giving index from the given list of restaurants in the given suburb
    public static void selectRestaurant(String suburbName) throws IOException {
        LinkedList<String> restaurantList = admin.getRestaurantListinSuburb(suburbName);
        int actualSize = restaurantList.size();
        int restaurantIndex;
        for (int i = 0; i < actualSize; i++) {

            printOnScreen(i + 1 + ": " + restaurantList.get(i));

        }
        while (true) {
            printOnScreen("Select a restaurant by giving index");

            restaurantIndex = getUserInputInt();
            if (actualSize < restaurantIndex || restaurantIndex <= 0) {

                printOnScreen("Invalid Selection, please try again");

            } else {

                restaurantName = restaurantList.get(restaurantIndex - 1);
                break;

            }
        }
        displayRestaurant(restaurantName);
    }
// Display the details of the selected restaurant by using restaurant controller
    public static void displayRestaurant(String restaurantName) throws IOException {

        printOnScreen(restaurantcontrol.getRestaurantDetails(restaurantName));
        addToCart();

    }

    //Add items to the cart from the selected restaurant by communicating with CartController
    public static void addToCart() throws IOException {

        printOnScreen("Select items to be added to the cart by giving index");
        printOnScreen("Select 0 to go to the cart");
        int itemIndex = getUserInputInt();
        while (true) {

            try {
                cart.addItemToCart(restaurantcontrol.getItem(itemIndex - 1));
            } catch (Exception e) {
                printOnScreen("Invalid input,please enter again");

            }
            itemIndex = getUserInputInt();
            if (itemIndex == 0 && cart.displayCart().isEmpty()) {

                printOnScreen("No items in the cart, add items");

            } else if (itemIndex == 0) {
                break;
            }
        }

        printOnScreen("Items in the cart-");
        displayCartItems();
    }
// Display items in the cart by using CartController
    public static void displayCartItems() throws IOException {
        int quantity;
        int index;

        while (true) {
            printOnScreen(cart.displayCart());
            printOnScreen("Select one option");
            printOnScreen("1. Change Quantity");
            printOnScreen("2. Checkout");
            index = getUserInputInt();

            if (index == 1) {
                printOnScreen("Select the item from the cart by giving the index");
                index = getUserInputInt();

                printOnScreen("Select the updated quantity");
                quantity = getUserInputInt();
                cart.updateQuantity(quantity, index - 1);

            } else if (index == 2) {
                ordercontrol.setTotalPrice(cart.calculateTotalPrice());
                break;

            } else {
                printOnScreen("Invalid selection");
            }
        }
        placeOrder();
    }
// Finalize the order after selecting the payment method and update delivery info 
    public static void placeOrder() throws IOException {
        String coupon;
        String message = "Type 1 to place order";
        printOnScreen(cart.displayCart());
        while (true) {
            // Select payment method
            printOnScreen("Select the payment method-");
            printOnScreen("1. Cash");
            printOnScreen("2. Coupon");
            printOnScreen("3. Cash & Coupon");
            int index = getUserInputInt();
            if (index == 1) {

                printOnScreen("Total amount to be paid by cash- $" + cart.calculateTotalPrice());
                printOnScreen(message);
                index = getUserInputInt();
                if (index == 1) {
                    //update delivery info
                    handlDeliveryInfo();
                    ordercontrol.placeOrder("Cash", cart.getItems());
                    break;
                }
            } else if (index == 2) {

                printOnScreen("Enter Coupon Code-");
                coupon = getUserInputString();

                if (ordercontrol.applyCoupon(coupon)) {
                    printOnScreen("Coupon applied successfully");
                    printOnScreen("Total amount to be paid -$0");
                    printOnScreen(message);
                    index = getUserInputInt();
                    if (index == 1) {
                        handlDeliveryInfo();
                        ordercontrol.placeOrder("Coupon", cart.getItems());
                        break;
                    }

                } else {

                    printOnScreen("Coupon cannot be applied for selected payment method");
                }

            } else if (index == 3) {

                printOnScreen("Enter Coupon Code-");
                coupon = getUserInputString();

				if (ordercontrol.applyCashCoupon(coupon)) {
					printOnScreen("Coupon applied successfully");
					printOnScreen("Total amount to be paid by cash- $" + ordercontrol.getTotalPrice());
					printOnScreen(message);
					index = getUserInputInt();
					if (index == 1) {
						handlDeliveryInfo();
						ordercontrol.placeOrder("Cash & Coupon", cart.getItems());
						break;
					}

				} else {

					printOnScreen("Invalid selection");
				}

			} else {
				printOnScreen("Invalid selection");
			}
		}
		// Display the receipt of the order
		ArrayList<String> list = new ArrayList<>(
				Arrays.asList(ordercontrol.viewReceipt(restaurantName, user.login()).split(",")));
		printOnScreen(list);
		

	}
// Method to handle address and phone number information for delivery
	public static void handlDeliveryInfo() {

		String deliveryMessage = "Update delivery Info";
		String streetaddress;
		String suburbNameString;
		ArrayList<String> list = new ArrayList<>();
		printOnScreen(deliveryMessage);
		printOnScreen("Update Delivery Address");
		while (true) {
			printOnScreen("Enter Street Address");
			streetaddress = getUserInputString();
			printOnScreen("Enter suburb name");
			suburbNameString = getUserInputString();
			if (suburbNameString.equals(suburbName)) {
				list.add(streetaddress + " Suburb- " + suburbNameString);
				break;

			} else {
				printOnScreen("Delivery cannot be done in this surburb");
			}
		}
		printOnScreen("Enter Phone Number");
		list.add(getUserInputString());
		ordercontrol.updateDeliveryInfo(list);

	}
// Print on the screen of the user
	public static void printOnScreen(String msg) {

		System.out.println(msg);

	}

	public static void printOnScreen(ArrayList<String> list) {

		for (int i = 0; i < list.size(); i++) {
			System.out.println(list.get(i));

		}

	}
// Get string input from user
	public static String getUserInputString() {

		@SuppressWarnings("resource")
		Scanner reader = new Scanner(System.in);
		return reader.next();

	}
// Get int input from user
	public static int getUserInputInt() {

		@SuppressWarnings("resource")

		Scanner reader = new Scanner(System.in);
		try {
			return reader.nextInt();
		} catch (java.util.InputMismatchException e) {
			return -1;
		}

	}
        
	//Get the type of Login
	public static int login() {
	Scanner scanner = new Scanner(System.in);
        String input;

        while(true) {
            System.out.println("Welcome to Monash Eat! Please enter your selection: ");
            System.out.println("1: Customer Login");
            System.out.println("2: Owner Login");
            System.out.println("3: Admin Login");
            System.out.println("4: Register");
            System.out.println("5: log out");
            while (true) {
                input = scanner.nextLine();
                if (input.matches("[0-9]+") && Integer.parseInt(input) >= 1 && Integer.parseInt(input) <= 5) {
                    break;
                } else {
                    System.out.println("Invalid Selection. Please enter number 1 to 5");
                    ;
                }
            }
            //Calling different function depending on user's input.
            switch (input) {
                case "1":
                    login("Customer");
                    break;

                case "2":
                    login("Owner");
                    break;

                case "3":
                    login("Admin");
                    break;

                case "4":
                    register();
                    break;

                case "5":
                    logout();
                    break;
            }
        }

	}	
	
	
}
